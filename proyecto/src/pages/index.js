import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import { useState } from 'react'
import Valores from './components/valores'
import Tarjeta from './components/tarjeta'
import { useRouter } from 'next/router'

const inter = Inter({ subsets: ['latin'] })

export default function Home() {
  const [cadena, setCadena] = useState("")
  const [q, setQ] = useState("")
  const [MRP, setMRP] = useState("")
  const [TS, setTS] = useState("")
  const [INV, setINV] = useState("")
  const [STOCK, setSTOCK] = useState("")
  const [tarjetas, setTarjetas] = useState([])
  const [padre, setPadre] = useState("")
  const [nivel, setNivel] = useState(0)
  const [cantidadNodos, setCantidadNodos] = useState(0)
  const [superCadena, setSuperCadena] =useState("")
  const router = useRouter()

  const crearTarjeta = () => {
    if (nivel == 0) {
      if (q != "" && cadena != "" && MRP != "" && TS != "" && INV != "" && STOCK != "") {
        setSuperCadena(cadena)
        const arrayNumerico = cadena.split(',').map(numero => parseFloat(numero));
        const tarjeta = {
          demanda: arrayNumerico,
          DM: cadena,
          nivel,
          q,
          MRP,
          TS,
          INV,
          STOCK
        }
        setTarjetas([...tarjetas, tarjeta]);
        setCadena("")
        setQ("")
        setMRP("")
        setTS("")
        setINV("")
        setSTOCK("")
        setPadre("")
      }
    } else {
      if (q != "" && MRP != "" && TS != "" && INV != "" && STOCK != "") {
        const arrayNumerico = cadena.split(',').map(numero => parseFloat(numero));
        const tarjeta = {
          demanda: arrayNumerico,
          DM: cadena,
          nivel,
          q,
          MRP,
          TS,
          INV,
          STOCK,
          padre,
          nivel
        }
        setTarjetas([...tarjetas, tarjeta]);
        setCadena("")
        setQ("")
        setMRP("")
        setTS("")
        setINV("")
        setSTOCK("")
        setPadre("")
      }
    }


  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.superContainer}>
        <div className={styles.containerInfo}>
          <div className={styles.containerDemanda}>
            <div className={styles.demanda}>
              Demanda
            </div>
            <input className={styles.demandaInput} type="text" onChange={(evt) => setCadena(evt.target.value)} value={cadena}></input>
          </div>
          <div className={styles.containerValues}>
            <Valores campo="MRP" valor={MRP} setValor={setMRP} tipo="text"></Valores>
            <Valores campo="TS" valor={TS} setValor={setTS} tipo="number"></Valores>
            <Valores campo="Q" valor={q} setValor={setQ} tipo="number"></Valores>
            <Valores campo="INV" valor={INV} setValor={setINV} tipo="number"></Valores>
            <Valores campo="STOCK" valor={STOCK} setValor={setSTOCK} tipo="number"></Valores>
            <Valores campo="Padre" valor={padre} setValor={setPadre} tipo="text"></Valores>
            <Valores campo="Nivel" valor={nivel} setValor={setNivel} tipo="number"></Valores>
          </div>
          <div className={styles.botones}>
            <button className={styles.boton} onClick={() => {
              crearTarjeta()
              setCantidadNodos(cantidadNodos+1)
            }}>Agregar</button>
            <button className={styles.boton}  onClick={()=>{
              sessionStorage.setItem("cadena", superCadena)
              sessionStorage.setItem("cantidadNodos", cantidadNodos)
              router.push("mostrarTablas")
            }}>Generar MRP</button>
          </div>
        </div>
        <div className={styles.containerTarjetas}>
          {tarjetas.map((item) => {
            return (
              <Tarjeta
                MRP={item.MRP} 
                Q={item.q} 
                TS={item.TS} 
                INV={item.INV} 
                STOCK={item.STOCK} 
                DEMANDA={item.demanda} 
                cadena={item.DM} 
                setPadre={setPadre}
                padre={item.padre}
                nivel={item.nivel}
                setNivel={setNivel}
              >
              </Tarjeta>
            )
          })}
        </div>
      </div>
    </>
  )
}
